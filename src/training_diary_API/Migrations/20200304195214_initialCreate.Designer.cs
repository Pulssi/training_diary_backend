// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using trainingDiaryBackend.Models;

namespace trainingDiaryBackend.Migrations
{
    [DbContext(typeof(tddbContext))]
    [Migration("20200304195214_initialCreate")]
    partial class initialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("trainingDiaryBackend.Models.GymMove", b =>
                {
                    b.Property<int>("IdGymMove")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MoveDescription")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("MoveName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("IdGymMove")
                        .HasName("PK__GymMove__127ABF0A9AF70158");

                    b.ToTable("GymMove");
                });

            modelBuilder.Entity("trainingDiaryBackend.Models.GymSet", b =>
                {
                    b.Property<int>("IdGymSet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdGymMove")
                        .HasColumnType("int");

                    b.Property<int>("IdPerson")
                        .HasColumnType("int");

                    b.Property<int>("Repetitions")
                        .HasColumnType("int");

                    b.Property<double>("SetWeight")
                        .HasColumnType("float");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime");

                    b.HasKey("IdGymSet")
                        .HasName("PK__GymSet__7CA0CD41285B77DE");

                    b.HasIndex("IdGymMove");

                    b.HasIndex("IdPerson");

                    b.ToTable("GymSet");
                });

            modelBuilder.Entity("trainingDiaryBackend.Models.Meal", b =>
                {
                    b.Property<int>("IdMeal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Calories")
                        .HasColumnType("float");

                    b.Property<double?>("Carbs")
                        .HasColumnType("float");

                    b.Property<double?>("Fats")
                        .HasColumnType("float");

                    b.Property<int>("IdPerson")
                        .HasColumnType("int");

                    b.Property<string>("MealDescription")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("MealName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<double?>("Proteins")
                        .HasColumnType("float");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime");

                    b.HasKey("IdMeal")
                        .HasName("PK__Meal__4D7C3B3AF07A767D");

                    b.HasIndex("IdPerson");

                    b.ToTable("Meal");
                });

            modelBuilder.Entity("trainingDiaryBackend.Models.Person", b =>
                {
                    b.Property<int>("IdPerson")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.HasKey("IdPerson")
                        .HasName("PK__Person__A5D4E15B3B668184");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("trainingDiaryBackend.Models.Weight", b =>
                {
                    b.Property<int>("IdWeight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("IdPerson")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime");

                    b.HasKey("IdWeight")
                        .HasName("PK__Weight__CEE0A1B62E615389");

                    b.HasIndex("IdPerson");

                    b.ToTable("Weight");
                });

            modelBuilder.Entity("trainingDiaryBackend.Models.GymSet", b =>
                {
                    b.HasOne("trainingDiaryBackend.Models.GymMove", "IdGymMoveNavigation")
                        .WithMany("GymSet")
                        .HasForeignKey("IdGymMove")
                        .HasConstraintName("FK__GymSet__IdGymMov__76969D2E")
                        .IsRequired();

                    b.HasOne("trainingDiaryBackend.Models.Person", "IdPersonNavigation")
                        .WithMany("GymSet")
                        .HasForeignKey("IdPerson")
                        .HasConstraintName("FK__GymSet__IdPerson__778AC167")
                        .IsRequired();
                });

            modelBuilder.Entity("trainingDiaryBackend.Models.Meal", b =>
                {
                    b.HasOne("trainingDiaryBackend.Models.Person", "IdPersonNavigation")
                        .WithMany("Meal")
                        .HasForeignKey("IdPerson")
                        .HasConstraintName("FK__Meal__IdPerson__7D439ABD")
                        .IsRequired();
                });

            modelBuilder.Entity("trainingDiaryBackend.Models.Weight", b =>
                {
                    b.HasOne("trainingDiaryBackend.Models.Person", "IdPersonNavigation")
                        .WithMany("Weight")
                        .HasForeignKey("IdPerson")
                        .HasConstraintName("FK__Weight__IdPerson__7A672E12")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
